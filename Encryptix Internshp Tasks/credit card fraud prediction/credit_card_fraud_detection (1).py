# -*- coding: utf-8 -*-
"""Credit card fraud detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pMPnOyWvcXKs80QJ7H-UZTc_y2YZ3mZ-
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d kartik2112/fraud-detection

import zipfile
zip_ref = zipfile.ZipFile('/content/fraud-detection.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

"""# Import Necessary libraries"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

"""# Load Dataset"""

fraud_train_data = pd.read_csv('/content/fraudTrain.csv')
fraud_test_data = pd.read_csv('/content/fraudTest.csv')
fraud_train_data.drop('Unnamed: 0', axis=1, inplace=True)
fraud_test_data.drop('Unnamed: 0', axis=1, inplace=True)
fraud_train_data.head()

for col in fraud_train_data.columns:
  print(col)

"""# Remove Unnecessary Columns"""

columns_to_drop = ['trans_date_trans_time','merchant', 'cc_num', 'first', 'last', 'street', 'city',
                   'state', 'zip','job' ,'lat','dob', 'long', 'trans_num', 'unix_time']
fraud_train_data = fraud_train_data.drop(columns=columns_to_drop)
fraud_test_data = fraud_test_data.drop(columns=columns_to_drop)

fraud_train_data.head()

print(fraud_train_data.shape)
print(fraud_test_data.shape)

"""# Visualize training data"""

plt.figure(figsize=(10, 6))
sns.histplot(data=fraud_train_data, x='amt', hue='is_fraud', kde=True)
plt.title('Distribution of Transaction Amounts')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=fraud_train_data, x='category', hue='is_fraud')
plt.title('Fraud Count per Category')
plt.xticks(rotation=90)
plt.show()

fraud_counts = fraud_train_data['is_fraud'].value_counts()
fraud_count = fraud_counts[1]
non_fraud_count = fraud_counts[0]

plt.figure(figsize=(10, 6))
sns.countplot(data=fraud_train_data, x='gender', hue='is_fraud')
plt.title(f'Fraud Count by Gender (Fraud: {fraud_count}, Non-Fraud: {non_fraud_count})')
plt.show()

categorical_cols = ['category', 'gender']
label_encoders = {}

for col in categorical_cols:
    le = LabelEncoder()
    fraud_train_data[col] = le.fit_transform(fraud_train_data[col])
    fraud_test_data[col] = le.transform(fraud_test_data[col])
    label_encoders[col] = le

fraud_train_data.head()

X_train = fraud_train_data.drop('is_fraud', axis=1)
y_train = fraud_train_data['is_fraud']
X_test = fraud_test_data.drop('is_fraud', axis=1)
y_test = fraud_test_data['is_fraud']

X_train.head()

y_train.head()

y_train.value_counts()

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""# Define Models"""

models = {
    'Logistic Regression': LogisticRegression(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier()
}

"""# Train models and collect accuracy scores"""

accuracy_scores = []
model_names = []
for name, model in models.items():
    print(f"Training {name}...")
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_scores.append(accuracy)
    model_names.append(name)
    print(f"Accuracy of {name}: {accuracy}")
    print("Classification Report:")
    print(classification_report(y_test, y_pred))
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    print()

"""# Plot confusion matrices"""

def plot_confusion_matrix(y_test, y_pred, model_name):
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f'Confusion Matrix: {model_name}')
    plt.xlabel('Predicted')
    plt.ylabel('True')
    plt.show()

for name, model in models.items():
    y_pred = model.predict(X_test_scaled)
    plot_confusion_matrix(y_test, y_pred, name)

"""# Plot accuracy comparison"""

plt.figure(figsize=(6, 5))
plt.bar(model_names, accuracy_scores, color=['blue', 'green'])
plt.xlabel('Models')
plt.ylabel('Accuracy')
plt.title('Model Comparison')
plt.ylim(0, 1)  # Assuming accuracy is a value between 0 and 1
for i, v in enumerate(accuracy_scores):
    plt.text(i, v + 0.01, f"{v:.2f}", ha='center', va='bottom')
plt.show()

"""# Save the trained models"""

import joblib
for name, model in models.items():
    filename = f'{name.replace(" ", "_").lower()}_model.joblib'
    joblib.dump(model, filename)
    print(f"Model saved: {filename}")

