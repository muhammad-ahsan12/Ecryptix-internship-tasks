# -*- coding: utf-8 -*-
"""Movie genre prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18adLIVWwvOSczA6-tkSEPJi68yReYWzZ
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d guru001/movie-genre-prediction

import zipfile
zip_ref = zipfile.ZipFile('movie-genre-prediction.zip', 'r')
zip_ref.extractall()
zip_ref.close()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

train_data = pd.read_csv('/content/train.csv')
test_data = pd.read_csv('/content/test.csv')
sample_submission = pd.read_csv('/content/sample_submission.csv')
print(train_data.head())
print(test_data.head())
print(sample_submission.head())

train_data['synopsis'][3]

print(train_data.shape)
print(test_data.shape)
print(sample_submission.shape)

X_train_texts = train_data[['movie_name','synopsis']]
y_train = train_data['genre']
X_test_texts = test_data[['movie_name','synopsis']]

X_train_combined = X_train_texts['movie_name'] + ' ' + X_train_texts['synopsis']
X_test_combined = X_test_texts['movie_name'] + ' ' + X_test_texts['synopsis']

tf_idf = TfidfVectorizer(stop_words='english', max_features=2000)

X_train = tf_idf.fit_transform(X_train_combined)

X_test = tf_idf.transform(X_test_combined)

print(X_train)

X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2)

X_train.shape, X_val.shape, y_train.shape, y_val.shape

NB_model = MultinomialNB()
NB_model.fit(X_train, y_train)

y_pred = NB_model.predict(X_val)
accuracy = accuracy_score(y_val, y_pred)
print("Naive Bayes Accuracy:", accuracy)
print(classification_report(y_val, y_pred))

y_pred = NB_model.predict(X_test)
sample_submission['genre'] = y_pred
sample_submission.to_csv('submission_NB.csv', index=False)

LR_model = LogisticRegression(max_iter=1000)
LR_model.fit(X_train, y_train)

y_pred = LR_model.predict(X_val)
accuracy = accuracy_score(y_val, y_pred)
print("Logistic Regression Accuracy:", accuracy)
print(classification_report(y_val, y_pred))

y_pred = LR_model.predict(X_test)
sample_submission['genre'] = y_pred
sample_submission.to_csv('submission_LR.csv', index=False)

def predict_genre(description):
    """
    Predict the genre of a movie based on its plot description.

    Args:
    description (str): The plot description of the movie.

    Returns:
    dict: A dictionary with predictions from both models.
    """
    
    description_transformed = tf_idf.transform([description])

    
    prediction_nb = NB_model.predict(description_transformed)[0]
    prediction_lr = LR_model.predict(description_transformed)[0]

    return {
        'Naive Bayes': prediction_nb,
        'Logistic Regression': prediction_lr
    }

# Example usage
example_description = "A young wizard embarks on a journey to find magical artifacts."
predicted_genres = predict_genre(example_description)
print(predicted_genres)

