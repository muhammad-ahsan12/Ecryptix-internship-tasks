# -*- coding: utf-8 -*-
"""Customer Churn Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uipp25sZg5uzkApeWWBYyFxWi92ofFY5
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d shantanudhakadd/bank-customer-churn-prediction

import zipfile
zip_ref = zipfile.ZipFile('/content/bank-customer-churn-prediction.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

"""# Import Necessary Libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc, accuracy_score

Customer_data = pd.read_csv('/content/Churn_Modelling.csv')
Customer_data.head()

for columns in Customer_data.columns:
  print(columns)

"""# Remove Unnecessary Columns"""

Customer_data = Customer_data.drop(columns=['RowNumber', 'CustomerId', 'Surname'])

Customer_data.head()

labels_columns = ["Geography", "Gender"]
encoder = LabelEncoder()
for columns in labels_columns:
  Customer_data[columns] = encoder.fit_transform(Customer_data[columns])

Customer_data.head()

"""# Data Visualizarion Part

# Distribution of churned vs retained customers
"""

sns.countplot(x='Exited', data=Customer_data)
plt.title('Distribution of Churned vs Retained Customers')
plt.show()

"""# Credit Score vs Churn"""

plt.figure(figsize=(7, 5))
sns.histplot(data=Customer_data, x='CreditScore', hue='Exited', element='step', stat='density', common_norm=False)
plt.title('Credit Score Distribution by Churn')
plt.show()

plt.figure(figsize=(7, 5))
sns.countplot(x='Geography', hue='Exited', data=Customer_data)
plt.title('Geography vs Churn')
plt.show()

plt.figure(figsize=(7, 5))
sns.countplot(x='Gender', hue='Exited', data=Customer_data)
plt.title('Gender vs Churn')
plt.show()

plt.figure(figsize=(7, 5))
sns.histplot(data=Customer_data, x='Age', hue='Exited', element='step', stat='density', common_norm=False)
plt.title('Age Distribution by Churn')
plt.show()

plt.figure(figsize=(7, 5))
sns.boxplot(x='Exited', y='Age', data=Customer_data)
plt.title('Age vs Churn')
plt.show()

plt.figure(figsize=(7, 5))
sns.histplot(data=Customer_data, x='Balance', hue='Exited', element='step', stat='density', common_norm=False)
plt.title('Balance Distribution by Churn')
plt.show()

"""# Estimated Salary vs Churn"""

plt.figure(figsize=(7, 5))
sns.histplot(data=Customer_data, x='EstimatedSalary', hue='Exited', element='step', stat='density', common_norm=False)
plt.title('Estimated Salary Distribution by Churn')
plt.show()

plt.figure(figsize=(7, 5))
sns.violinplot(x='Exited', y='CreditScore', data=Customer_data)
plt.title('Credit Score vs Churn')
plt.show()

"""# Selecting a subset of columns for pair plot"""

subset_columns = ['CreditScore', 'Age', 'Balance', 'EstimatedSalary', 'Exited']
sns.pairplot(Customer_data[subset_columns], hue='Exited')
plt.title('Pair Plot of Selected Features')
plt.show()

plt.figure(figsize=(10, 6))
correlation_matrix = Customer_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Heatmap')
plt.show()

plt.figure(figsize=(7, 5))
sns.barplot(x='Gender', y='Exited', data=Customer_data, estimator=lambda x: sum(x==1)/len(x))
plt.title('Gender vs Churn Rate')
plt.show()

"""# Convert Data into Traing and Testing part"""

X = Customer_data.drop('Exited', axis=1)
y = Customer_data['Exited']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

"""# Define Models"""

models = {
    'Logistic Regression': LogisticRegression(),
    'Random Forest': RandomForestClassifier(),
    'Gradient Boosting': GradientBoostingClassifier()
}

model_name = []
model_accuracy = []
model_precision = []
model_recall = []
model_f1_score = []

for model_name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = np.mean(y_pred == y_test)
    precision = np.mean(np.logical_and(y_pred == 1, y_test == 1))
    recall = np.mean(np.logical_and(y_pred == 1, y_test == 1))
    f1_score = 2 * (precision * recall) / (precision + recall)
    model_accuracy.append(accuracy)
    model_precision.append(precision)
    model_recall.append(recall)
    model_f1_score.append(f1_score)
    print(f'{model_name} Accuracy: {accuracy:.2f}')
    print(f'{model_name} Precision: {precision:.2f}')
    print(f'{model_name} Recall: {recall:.2f}')
    print(f'{model_name} F1 Score: {f1_score:.2f}')
    print()

accuracy_scores = []
model_names = []
for name, model in models.items():
    print(f"Training {name}...")
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_scores.append(accuracy)
    model_names.append(name)
    print(f"Accuracy of {name}: {accuracy}")
    print("Classification Report:")
    print(classification_report(y_test, y_pred))
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    print()

plt.figure(figsize=(6, 5))
plt.bar(model_names, accuracy_scores, color=['blue', 'green'])
plt.xlabel('Models')
plt.ylabel('Accuracy')
plt.title('Model Comparison')
plt.ylim(0, 1)  # Assuming accuracy is a value between 0 and 1
for i, v in enumerate(accuracy_scores):
    plt.text(i, v + 0.01, f"{v:.2f}", ha='center', va='bottom')
plt.show()

import joblib
for name, model in models.items():
    joblib.dump(model, f'{name}.pkl')

